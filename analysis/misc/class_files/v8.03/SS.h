// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/nfs-7/userdata/hmei/tupler_babies/merged/FT/v3.35_tthh/output/year_2018/TTHHfilter.root", "t", "SSAG", "ss", "samesign")

#ifndef SSAG_H
#define SSAG_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class SSAG {
 private: 
 protected: 
  unsigned int index;
  bool     lep1_isPrompt_;
  TBranch *lep1_isPrompt_branch;
  bool     lep1_isPrompt_isLoaded;
  bool     lep1_isDirectPrompt_;
  TBranch *lep1_isDirectPrompt_branch;
  bool     lep1_isDirectPrompt_isLoaded;
  bool     lep1_isStat3_;
  TBranch *lep1_isStat3_branch;
  bool     lep1_isStat3_isLoaded;
  bool     lep2_isPrompt_;
  TBranch *lep2_isPrompt_branch;
  bool     lep2_isPrompt_isLoaded;
  bool     lep2_isDirectPrompt_;
  TBranch *lep2_isDirectPrompt_branch;
  bool     lep2_isDirectPrompt_isLoaded;
  bool     lep2_isStat3_;
  TBranch *lep2_isStat3_branch;
  bool     lep2_isStat3_isLoaded;
  float    met_;
  TBranch *met_branch;
  bool     met_isLoaded;
  float    metPhi_;
  TBranch *metPhi_branch;
  bool     metPhi_isLoaded;
  float    rawmet_;
  TBranch *rawmet_branch;
  bool     rawmet_isLoaded;
  float    rawmetPhi_;
  TBranch *rawmetPhi_branch;
  bool     rawmetPhi_isLoaded;
  float    calomet_;
  TBranch *calomet_branch;
  bool     calomet_isLoaded;
  float    calometPhi_;
  TBranch *calometPhi_branch;
  bool     calometPhi_isLoaded;
  unsigned long long event_;
  TBranch *event_branch;
  bool     event_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  bool     filt_csc_;
  TBranch *filt_csc_branch;
  bool     filt_csc_isLoaded;
  bool     filt_hbhe_;
  TBranch *filt_hbhe_branch;
  bool     filt_hbhe_isLoaded;
  bool     filt_hcallaser_;
  TBranch *filt_hcallaser_branch;
  bool     filt_hcallaser_isLoaded;
  bool     filt_ecaltp_;
  TBranch *filt_ecaltp_branch;
  bool     filt_ecaltp_isLoaded;
  bool     filt_trkfail_;
  TBranch *filt_trkfail_branch;
  bool     filt_trkfail_isLoaded;
  bool     is_real_data_;
  TBranch *is_real_data_branch;
  bool     is_real_data_isLoaded;
  float    scale1fb_;
  TBranch *scale1fb_branch;
  bool     scale1fb_isLoaded;
  float    genps_weight_;
  TBranch *genps_weight_branch;
  bool     genps_weight_isLoaded;
  float    xsec_;
  TBranch *xsec_branch;
  bool     xsec_isLoaded;
  int      neventstotal_;
  TBranch *neventstotal_branch;
  bool     neventstotal_isLoaded;
  float    xsec_ps_;
  TBranch *xsec_ps_branch;
  bool     xsec_ps_isLoaded;
  vector<TString> *sparmNames_;
  TBranch *sparmNames_branch;
  bool     sparmNames_isLoaded;
  vector<float> *sparms_;
  TBranch *sparms_branch;
  bool     sparms_isLoaded;
  float    xsec_error_;
  TBranch *xsec_error_branch;
  bool     xsec_error_isLoaded;
  float    kfactor_;
  TBranch *kfactor_branch;
  bool     kfactor_isLoaded;
  float    gen_met_;
  TBranch *gen_met_branch;
  bool     gen_met_isLoaded;
  vector<float> *pdfweights_;
  TBranch *pdfweights_branch;
  bool     pdfweights_isLoaded;
  float    gen_met_phi_;
  TBranch *gen_met_phi_branch;
  bool     gen_met_phi_isLoaded;
  bool     skim_;
  TBranch *skim_branch;
  bool     skim_isLoaded;
  bool     skim_nomet_;
  TBranch *skim_nomet_branch;
  bool     skim_nomet_isLoaded;
  int      nleps_;
  TBranch *nleps_branch;
  bool     nleps_isLoaded;
  int      sr_;
  TBranch *sr_branch;
  bool     sr_isLoaded;
  bool     br_;
  TBranch *br_branch;
  bool     br_isLoaded;
  int      ss_nleps_;
  TBranch *ss_nleps_branch;
  bool     ss_nleps_isLoaded;
  bool     ss_br_;
  TBranch *ss_br_branch;
  bool     ss_br_isLoaded;
  int      ss_sr_;
  TBranch *ss_sr_branch;
  bool     ss_sr_isLoaded;
  int      ss_region_;
  TBranch *ss_region_branch;
  bool     ss_region_isLoaded;
  int      njets_;
  TBranch *njets_branch;
  bool     njets_isLoaded;
  int      njetsAG_;
  TBranch *njetsAG_branch;
  bool     njetsAG_isLoaded;
  int      nbtagsAG_;
  TBranch *nbtagsAG_branch;
  bool     nbtagsAG_isLoaded;
  int      njets_raw_;
  TBranch *njets_raw_branch;
  bool     njets_raw_isLoaded;
  int      hyp_class_;
  TBranch *hyp_class_branch;
  bool     hyp_class_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_p4_;
  TBranch *lep1_p4_branch;
  bool     lep1_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_p4_;
  TBranch *lep2_p4_branch;
  bool     lep2_p4_isLoaded;
  float    lep1_pt_;
  TBranch *lep1_pt_branch;
  bool     lep1_pt_isLoaded;
  float    lep2_pt_;
  TBranch *lep2_pt_branch;
  bool     lep2_pt_isLoaded;
  float    lep3_pt_;
  TBranch *lep3_pt_branch;
  bool     lep3_pt_isLoaded;
  float    lep1_eta_;
  TBranch *lep1_eta_branch;
  bool     lep1_eta_isLoaded;
  float    lep2_eta_;
  TBranch *lep2_eta_branch;
  bool     lep2_eta_isLoaded;
  float    lep3_eta_;
  TBranch *lep3_eta_branch;
  bool     lep3_eta_isLoaded;
  float    lep1_phi_;
  TBranch *lep1_phi_branch;
  bool     lep1_phi_isLoaded;
  float    lep2_phi_;
  TBranch *lep2_phi_branch;
  bool     lep2_phi_isLoaded;
  float    lep3_phi_;
  TBranch *lep3_phi_branch;
  bool     lep3_phi_isLoaded;
  float    ht_raw_;
  TBranch *ht_raw_branch;
  bool     ht_raw_isLoaded;
  float    ht_;
  TBranch *ht_branch;
  bool     ht_isLoaded;
  int      lep1_motherID_;
  TBranch *lep1_motherID_branch;
  bool     lep1_motherID_isLoaded;
  int      lep2_motherID_;
  TBranch *lep2_motherID_branch;
  bool     lep2_motherID_isLoaded;
  int      lep1_mc_id_;
  TBranch *lep1_mc_id_branch;
  bool     lep1_mc_id_isLoaded;
  int      lep2_mc_id_;
  TBranch *lep2_mc_id_branch;
  bool     lep2_mc_id_isLoaded;
  int      lep1_mc_motherid_;
  TBranch *lep1_mc_motherid_branch;
  bool     lep1_mc_motherid_isLoaded;
  int      lep2_mc_motherid_;
  TBranch *lep2_mc_motherid_branch;
  bool     lep2_mc_motherid_isLoaded;
  int      lep1_id_;
  TBranch *lep1_id_branch;
  bool     lep1_id_isLoaded;
  int      lep2_id_;
  TBranch *lep2_id_branch;
  bool     lep2_id_isLoaded;
  float    lep1_coneCorrPt_;
  TBranch *lep1_coneCorrPt_branch;
  bool     lep1_coneCorrPt_isLoaded;
  float    lep2_coneCorrPt_;
  TBranch *lep2_coneCorrPt_branch;
  bool     lep2_coneCorrPt_isLoaded;
  float    lep3_coneCorrPt_;
  TBranch *lep3_coneCorrPt_branch;
  bool     lep3_coneCorrPt_isLoaded;
  float    lep4_coneCorrPt_;
  TBranch *lep4_coneCorrPt_branch;
  bool     lep4_coneCorrPt_isLoaded;
  int      lep1_idx_;
  TBranch *lep1_idx_branch;
  bool     lep1_idx_isLoaded;
  int      lep2_idx_;
  TBranch *lep2_idx_branch;
  bool     lep2_idx_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_;
  TBranch *jets_branch;
  bool     jets_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_jec_up_;
  TBranch *jets_jec_up_branch;
  bool     jets_jec_up_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_jec_dn_;
  TBranch *jets_jec_dn_branch;
  bool     jets_jec_dn_isLoaded;
  vector<float> *jets_disc_up_;
  TBranch *jets_disc_up_branch;
  bool     jets_disc_up_isLoaded;
  vector<float> *jets_disc_dn_;
  TBranch *jets_disc_dn_branch;
  bool     jets_disc_dn_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *bjets_jec_up_;
  TBranch *bjets_jec_up_branch;
  bool     bjets_jec_up_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *bjets_jec_dn_;
  TBranch *bjets_jec_dn_branch;
  bool     bjets_jec_dn_isLoaded;
  vector<int> *btags_flavor_;
  TBranch *btags_flavor_branch;
  bool     btags_flavor_isLoaded;
  vector<float> *btags_disc_;
  TBranch *btags_disc_branch;
  bool     btags_disc_isLoaded;
  vector<float> *btags_cdisc_;
  TBranch *btags_cdisc_branch;
  bool     btags_cdisc_isLoaded;
  vector<int> *jets_flavor_;
  TBranch *jets_flavor_branch;
  bool     jets_flavor_isLoaded;
  vector<float> *jets_disc_;
  TBranch *jets_disc_branch;
  bool     jets_disc_isLoaded;
  vector<float> *jets_bsf_;
  TBranch *jets_bsf_branch;
  bool     jets_bsf_isLoaded;
  vector<float> *jets_JEC_;
  TBranch *jets_JEC_branch;
  bool     jets_JEC_isLoaded;
  vector<float> *btags_JEC_;
  TBranch *btags_JEC_branch;
  bool     btags_JEC_isLoaded;
  vector<float> *jets_undoJEC_;
  TBranch *jets_undoJEC_branch;
  bool     jets_undoJEC_isLoaded;
  vector<float> *btags_undoJEC_;
  TBranch *btags_undoJEC_branch;
  bool     btags_undoJEC_isLoaded;
  vector<float> *btags_unc_;
  TBranch *btags_unc_branch;
  bool     btags_unc_isLoaded;
  vector<float> *btags_eff_;
  TBranch *btags_eff_branch;
  bool     btags_eff_isLoaded;
  vector<float> *btags_effpt_;
  TBranch *btags_effpt_branch;
  bool     btags_effpt_isLoaded;
  vector<float> *btags_sf_;
  TBranch *btags_sf_branch;
  bool     btags_sf_isLoaded;
  vector<float> *jets_unc_;
  TBranch *jets_unc_branch;
  bool     jets_unc_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *btags_;
  TBranch *btags_branch;
  bool     btags_isLoaded;
  int      nbtags_;
  TBranch *nbtags_branch;
  bool     nbtags_isLoaded;
  int      nbtags_raw_;
  TBranch *nbtags_raw_branch;
  bool     nbtags_raw_isLoaded;
  float    sf_dilepTrig_hpt_;
  TBranch *sf_dilepTrig_hpt_branch;
  bool     sf_dilepTrig_hpt_isLoaded;
  float    sf_dilepTrig_lpt_;
  TBranch *sf_dilepTrig_lpt_branch;
  bool     sf_dilepTrig_lpt_isLoaded;
  float    sf_dilepTrig_vlpt_;
  TBranch *sf_dilepTrig_vlpt_branch;
  bool     sf_dilepTrig_vlpt_isLoaded;
  int      hyp_type_;
  TBranch *hyp_type_branch;
  bool     hyp_type_isLoaded;
  float    sf_dilep_eff_;
  TBranch *sf_dilep_eff_branch;
  bool     sf_dilep_eff_isLoaded;
  float    mt_;
  TBranch *mt_branch;
  bool     mt_isLoaded;
  float    mt_l2_;
  TBranch *mt_l2_branch;
  bool     mt_l2_isLoaded;
  float    mt2_;
  TBranch *mt2_branch;
  bool     mt2_isLoaded;
  float    mtmin_;
  TBranch *mtmin_branch;
  bool     mtmin_isLoaded;
  int      lep1_id_gen_;
  TBranch *lep1_id_gen_branch;
  bool     lep1_id_gen_isLoaded;
  int      lep2_id_gen_;
  TBranch *lep2_id_gen_branch;
  bool     lep2_id_gen_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_p4_gen_;
  TBranch *lep1_p4_gen_branch;
  bool     lep1_p4_gen_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_p4_gen_;
  TBranch *lep2_p4_gen_branch;
  bool     lep2_p4_gen_isLoaded;
  int      lep3_id_;
  TBranch *lep3_id_branch;
  bool     lep3_id_isLoaded;
  int      lep3_idx_;
  TBranch *lep3_idx_branch;
  bool     lep3_idx_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep3_p4_;
  TBranch *lep3_p4_branch;
  bool     lep3_p4_isLoaded;
  int      lep3_quality_;
  TBranch *lep3_quality_branch;
  bool     lep3_quality_isLoaded;
  int      lep4_id_;
  TBranch *lep4_id_branch;
  bool     lep4_id_isLoaded;
  int      lep4_idx_;
  TBranch *lep4_idx_branch;
  bool     lep4_idx_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep4_p4_;
  TBranch *lep4_p4_branch;
  bool     lep4_p4_isLoaded;
  float    lep1_iso_;
  TBranch *lep1_iso_branch;
  bool     lep1_iso_isLoaded;
  float    lep2_iso_;
  TBranch *lep2_iso_branch;
  bool     lep2_iso_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *dilep_p4_;
  TBranch *dilep_p4_branch;
  bool     dilep_p4_isLoaded;
  float    dilep_mass_;
  TBranch *dilep_mass_branch;
  bool     dilep_mass_isLoaded;
  float    mass13_;
  TBranch *mass13_branch;
  bool     mass13_isLoaded;
  float    mass23_;
  TBranch *mass23_branch;
  bool     mass23_isLoaded;
  float    mass123_;
  TBranch *mass123_branch;
  bool     mass123_isLoaded;
  int      ncharginos_;
  TBranch *ncharginos_branch;
  bool     ncharginos_isLoaded;
  int      nhiggs_;
  TBranch *nhiggs_branch;
  bool     nhiggs_isLoaded;
  int      higgs_mass_;
  TBranch *higgs_mass_branch;
  bool     higgs_mass_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genps_p4_;
  TBranch *genps_p4_branch;
  bool     genps_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genjets_p4_;
  TBranch *genjets_p4_branch;
  bool     genjets_p4_isLoaded;
  vector<int> *genps_id_;
  TBranch *genps_id_branch;
  bool     genps_id_isLoaded;
  vector<int> *genps_id_mother_;
  TBranch *genps_id_mother_branch;
  bool     genps_id_mother_isLoaded;
  vector<int> *genps_idx_mother_;
  TBranch *genps_idx_mother_branch;
  bool     genps_idx_mother_isLoaded;
  vector<int> *genps_status_;
  TBranch *genps_status_branch;
  bool     genps_status_isLoaded;
  vector<int> *genps_id_grandma_;
  TBranch *genps_id_grandma_branch;
  bool     genps_id_grandma_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *all_leps_p4_;
  TBranch *all_leps_p4_branch;
  bool     all_leps_p4_isLoaded;
  vector<int> *all_leps_id_;
  TBranch *all_leps_id_branch;
  bool     all_leps_id_isLoaded;
  vector<bool> *all_leps_veto_;
  TBranch *all_leps_veto_branch;
  bool     all_leps_veto_isLoaded;
  vector<int> *all_leps_mc3idx_;
  TBranch *all_leps_mc3idx_branch;
  bool     all_leps_mc3idx_isLoaded;
  bool     lep1_passes_id_;
  TBranch *lep1_passes_id_branch;
  bool     lep1_passes_id_isLoaded;
  bool     lep2_passes_id_;
  TBranch *lep2_passes_id_branch;
  bool     lep2_passes_id_isLoaded;
  bool     lep3_passes_id_;
  TBranch *lep3_passes_id_branch;
  bool     lep3_passes_id_isLoaded;
  bool     lep4_passes_id_;
  TBranch *lep4_passes_id_branch;
  bool     lep4_passes_id_isLoaded;
  bool     lep1_tight_;
  TBranch *lep1_tight_branch;
  bool     lep1_tight_isLoaded;
  bool     lep1_veto_;
  TBranch *lep1_veto_branch;
  bool     lep1_veto_isLoaded;
  bool     lep1_fo_;
  TBranch *lep1_fo_branch;
  bool     lep1_fo_isLoaded;
  bool     lep2_tight_;
  TBranch *lep2_tight_branch;
  bool     lep2_tight_isLoaded;
  bool     lep2_veto_;
  TBranch *lep2_veto_branch;
  bool     lep2_veto_isLoaded;
  bool     lep2_fo_;
  TBranch *lep2_fo_branch;
  bool     lep2_fo_isLoaded;
  bool     lep3_tight_;
  TBranch *lep3_tight_branch;
  bool     lep3_tight_isLoaded;
  bool     lep3_veto_;
  TBranch *lep3_veto_branch;
  bool     lep3_veto_isLoaded;
  bool     lep3_fo_;
  TBranch *lep3_fo_branch;
  bool     lep3_fo_isLoaded;
  bool     lep4_tight_;
  TBranch *lep4_tight_branch;
  bool     lep4_tight_isLoaded;
  bool     lep4_veto_;
  TBranch *lep4_veto_branch;
  bool     lep4_veto_isLoaded;
  bool     lep4_fo_;
  TBranch *lep4_fo_branch;
  bool     lep4_fo_isLoaded;
  float    lep1_dxyPV_;
  TBranch *lep1_dxyPV_branch;
  bool     lep1_dxyPV_isLoaded;
  float    lep2_dxyPV_;
  TBranch *lep2_dxyPV_branch;
  bool     lep2_dxyPV_isLoaded;
  float    lep1_dZ_;
  TBranch *lep1_dZ_branch;
  bool     lep1_dZ_isLoaded;
  float    lep2_dZ_;
  TBranch *lep2_dZ_branch;
  bool     lep2_dZ_isLoaded;
  float    lep1_d0_err_;
  TBranch *lep1_d0_err_branch;
  bool     lep1_d0_err_isLoaded;
  float    lep2_d0_err_;
  TBranch *lep2_d0_err_branch;
  bool     lep2_d0_err_isLoaded;
  float    lep1_ip3d_;
  TBranch *lep1_ip3d_branch;
  bool     lep1_ip3d_isLoaded;
  float    lep2_ip3d_;
  TBranch *lep2_ip3d_branch;
  bool     lep2_ip3d_isLoaded;
  float    lep1_MVA_;
  TBranch *lep1_MVA_branch;
  bool     lep1_MVA_isLoaded;
  float    lep2_MVA_;
  TBranch *lep2_MVA_branch;
  bool     lep2_MVA_isLoaded;
  float    lep1_ip3d_err_;
  TBranch *lep1_ip3d_err_branch;
  bool     lep1_ip3d_err_isLoaded;
  float    lep2_ip3d_err_;
  TBranch *lep2_ip3d_err_branch;
  bool     lep2_ip3d_err_isLoaded;
  int      nVetoElectrons7_;
  TBranch *nVetoElectrons7_branch;
  bool     nVetoElectrons7_isLoaded;
  int      nVetoElectrons10_;
  TBranch *nVetoElectrons10_branch;
  bool     nVetoElectrons10_isLoaded;
  int      nVetoElectrons25_;
  TBranch *nVetoElectrons25_branch;
  bool     nVetoElectrons25_isLoaded;
  int      nVetoMuons5_;
  TBranch *nVetoMuons5_branch;
  bool     nVetoMuons5_isLoaded;
  int      nVetoMuons10_;
  TBranch *nVetoMuons10_branch;
  bool     nVetoMuons10_isLoaded;
  int      nVetoMuons25_;
  TBranch *nVetoMuons25_branch;
  bool     nVetoMuons25_isLoaded;
  string *filename_;
  TBranch *filename_branch;
  bool     filename_isLoaded;
  float    lep1_ptrel_ma_;
  TBranch *lep1_ptrel_ma_branch;
  bool     lep1_ptrel_ma_isLoaded;
  float    lep1_ptratio_ma_;
  TBranch *lep1_ptratio_ma_branch;
  bool     lep1_ptratio_ma_isLoaded;
  float    lep2_ptrel_ma_;
  TBranch *lep2_ptrel_ma_branch;
  bool     lep2_ptrel_ma_isLoaded;
  float    lep2_ptratio_ma_;
  TBranch *lep2_ptratio_ma_branch;
  bool     lep2_ptratio_ma_isLoaded;
  float    lep1_ptrel_v1_;
  TBranch *lep1_ptrel_v1_branch;
  bool     lep1_ptrel_v1_isLoaded;
  float    lep2_ptrel_v1_;
  TBranch *lep2_ptrel_v1_branch;
  bool     lep2_ptrel_v1_isLoaded;
  float    lep1_ptratio_;
  TBranch *lep1_ptratio_branch;
  bool     lep1_ptratio_isLoaded;
  float    lep2_ptratio_;
  TBranch *lep2_ptratio_branch;
  bool     lep2_ptratio_isLoaded;
  float    lep1_miniIso_;
  TBranch *lep1_miniIso_branch;
  bool     lep1_miniIso_isLoaded;
  float    lep2_miniIso_;
  TBranch *lep2_miniIso_branch;
  bool     lep2_miniIso_isLoaded;
  vector<float> *trueNumInt_;
  TBranch *trueNumInt_branch;
  bool     trueNumInt_isLoaded;
  int      nGoodVertices_;
  TBranch *nGoodVertices_branch;
  bool     nGoodVertices_isLoaded;
  bool     lep1_trigMatch_noIsoReq_;
  TBranch *lep1_trigMatch_noIsoReq_branch;
  bool     lep1_trigMatch_noIsoReq_isLoaded;
  bool     lep1_trigMatch_isoReq_;
  TBranch *lep1_trigMatch_isoReq_branch;
  bool     lep1_trigMatch_isoReq_isLoaded;
  bool     lep2_trigMatch_noIsoReq_;
  TBranch *lep2_trigMatch_noIsoReq_branch;
  bool     lep2_trigMatch_noIsoReq_isLoaded;
  bool     lep2_trigMatch_isoReq_;
  TBranch *lep2_trigMatch_isoReq_branch;
  bool     lep2_trigMatch_isoReq_isLoaded;
  bool     passes_met_filters_;
  TBranch *passes_met_filters_branch;
  bool     passes_met_filters_isLoaded;
  bool     passes_chargedcand_filter_;
  TBranch *passes_chargedcand_filter_branch;
  bool     passes_chargedcand_filter_isLoaded;
  float    evt_egclean_pfmet_;
  TBranch *evt_egclean_pfmet_branch;
  bool     evt_egclean_pfmet_isLoaded;
  float    evt_muegclean_pfmet_;
  TBranch *evt_muegclean_pfmet_branch;
  bool     evt_muegclean_pfmet_isLoaded;
  float    evt_muegcleanfix_pfmet_;
  TBranch *evt_muegcleanfix_pfmet_branch;
  bool     evt_muegcleanfix_pfmet_isLoaded;
  float    evt_uncorr_pfmet_;
  TBranch *evt_uncorr_pfmet_branch;
  bool     evt_uncorr_pfmet_isLoaded;
  bool     filt_noBadMuons_;
  TBranch *filt_noBadMuons_branch;
  bool     filt_noBadMuons_isLoaded;
  bool     filt_duplicateMuons_;
  TBranch *filt_duplicateMuons_branch;
  bool     filt_duplicateMuons_isLoaded;
  bool     filt_badMuons_;
  TBranch *filt_badMuons_branch;
  bool     filt_badMuons_isLoaded;
  bool     failsRA2Filter_;
  TBranch *failsRA2Filter_branch;
  bool     failsRA2Filter_isLoaded;
  bool     madeExtraZ_;
  TBranch *madeExtraZ_branch;
  bool     madeExtraZ_isLoaded;
  bool     madeExtraG_;
  TBranch *madeExtraG_branch;
  bool     madeExtraG_isLoaded;
  int      lep3_mcid_;
  TBranch *lep3_mcid_branch;
  bool     lep3_mcid_isLoaded;
  int      lep3_mc_motherid_;
  TBranch *lep3_mc_motherid_branch;
  bool     lep3_mc_motherid_isLoaded;
  int      lep3_mc3idx_;
  TBranch *lep3_mc3idx_branch;
  bool     lep3_mc3idx_isLoaded;
  int      lep3_motherID_;
  TBranch *lep3_motherID_branch;
  bool     lep3_motherID_isLoaded;
  int      lep4_mcid_;
  TBranch *lep4_mcid_branch;
  bool     lep4_mcid_isLoaded;
  int      lep4_mcidx_;
  TBranch *lep4_mcidx_branch;
  bool     lep4_mcidx_isLoaded;
  int      njets_unc_up_;
  TBranch *njets_unc_up_branch;
  bool     njets_unc_up_isLoaded;
  int      njets_unc_dn_;
  TBranch *njets_unc_dn_branch;
  bool     njets_unc_dn_isLoaded;
  float    ht_unc_up_;
  TBranch *ht_unc_up_branch;
  bool     ht_unc_up_isLoaded;
  float    ht_unc_dn_;
  TBranch *ht_unc_dn_branch;
  bool     ht_unc_dn_isLoaded;
  int      nbtags_unc_up_;
  TBranch *nbtags_unc_up_branch;
  bool     nbtags_unc_up_isLoaded;
  int      nbtags_unc_dn_;
  TBranch *nbtags_unc_dn_branch;
  bool     nbtags_unc_dn_isLoaded;
  float    met_unc_up_;
  TBranch *met_unc_up_branch;
  bool     met_unc_up_isLoaded;
  float    met_unc_dn_;
  TBranch *met_unc_dn_branch;
  bool     met_unc_dn_isLoaded;
  float    metPhi_unc_up_;
  TBranch *metPhi_unc_up_branch;
  bool     metPhi_unc_up_isLoaded;
  float    metPhi_unc_dn_;
  TBranch *metPhi_unc_dn_branch;
  bool     metPhi_unc_dn_isLoaded;
  int      njets_JER_up_;
  TBranch *njets_JER_up_branch;
  bool     njets_JER_up_isLoaded;
  int      njets_JER_dn_;
  TBranch *njets_JER_dn_branch;
  bool     njets_JER_dn_isLoaded;
  float    ht_JER_up_;
  TBranch *ht_JER_up_branch;
  bool     ht_JER_up_isLoaded;
  float    ht_JER_dn_;
  TBranch *ht_JER_dn_branch;
  bool     ht_JER_dn_isLoaded;
  int      nbtags_JER_up_;
  TBranch *nbtags_JER_up_branch;
  bool     nbtags_JER_up_isLoaded;
  int      nbtags_JER_dn_;
  TBranch *nbtags_JER_dn_branch;
  bool     nbtags_JER_dn_isLoaded;
  float    met_JER_up_;
  TBranch *met_JER_up_branch;
  bool     met_JER_up_isLoaded;
  float    met_JER_dn_;
  TBranch *met_JER_dn_branch;
  bool     met_JER_dn_isLoaded;
  float    metPhi_JER_up_;
  TBranch *metPhi_JER_up_branch;
  bool     metPhi_JER_up_isLoaded;
  float    metPhi_JER_dn_;
  TBranch *metPhi_JER_dn_branch;
  bool     metPhi_JER_dn_isLoaded;
  bool     lep2_genps_isHardProcess_;
  TBranch *lep2_genps_isHardProcess_branch;
  bool     lep2_genps_isHardProcess_isLoaded;
  bool     lep2_genps_fromHardProcessFinalState_;
  TBranch *lep2_genps_fromHardProcessFinalState_branch;
  bool     lep2_genps_fromHardProcessFinalState_isLoaded;
  bool     lep2_genps_fromHardProcessDecayed_;
  TBranch *lep2_genps_fromHardProcessDecayed_branch;
  bool     lep2_genps_fromHardProcessDecayed_isLoaded;
  bool     lep2_genps_isDirectHardProcessTauDecayProductFinalState_;
  TBranch *lep2_genps_isDirectHardProcessTauDecayProductFinalState_branch;
  bool     lep2_genps_isDirectHardProcessTauDecayProductFinalState_isLoaded;
  bool     lep2_genps_fromHardProcessBeforeFSR_;
  TBranch *lep2_genps_fromHardProcessBeforeFSR_branch;
  bool     lep2_genps_fromHardProcessBeforeFSR_isLoaded;
  bool     lep2_genps_isLastCopy_;
  TBranch *lep2_genps_isLastCopy_branch;
  bool     lep2_genps_isLastCopy_isLoaded;
  bool     lep2_genps_isLastCopyBeforeFSR_;
  TBranch *lep2_genps_isLastCopyBeforeFSR_branch;
  bool     lep2_genps_isLastCopyBeforeFSR_isLoaded;
  bool     lep1_genps_isHardProcess_;
  TBranch *lep1_genps_isHardProcess_branch;
  bool     lep1_genps_isHardProcess_isLoaded;
  bool     lep1_genps_fromHardProcessFinalState_;
  TBranch *lep1_genps_fromHardProcessFinalState_branch;
  bool     lep1_genps_fromHardProcessFinalState_isLoaded;
  bool     lep1_genps_fromHardProcessDecayed_;
  TBranch *lep1_genps_fromHardProcessDecayed_branch;
  bool     lep1_genps_fromHardProcessDecayed_isLoaded;
  bool     lep1_genps_isDirectHardProcessTauDecayProductFinalState_;
  TBranch *lep1_genps_isDirectHardProcessTauDecayProductFinalState_branch;
  bool     lep1_genps_isDirectHardProcessTauDecayProductFinalState_isLoaded;
  bool     lep1_genps_fromHardProcessBeforeFSR_;
  TBranch *lep1_genps_fromHardProcessBeforeFSR_branch;
  bool     lep1_genps_fromHardProcessBeforeFSR_isLoaded;
  bool     lep1_genps_isLastCopy_;
  TBranch *lep1_genps_isLastCopy_branch;
  bool     lep1_genps_isLastCopy_isLoaded;
  bool     lep1_genps_isLastCopyBeforeFSR_;
  TBranch *lep1_genps_isLastCopyBeforeFSR_branch;
  bool     lep1_genps_isLastCopyBeforeFSR_isLoaded;
  int      lep1_mc3idx_;
  TBranch *lep1_mc3idx_branch;
  bool     lep1_mc3idx_isLoaded;
  int      lep2_mc3idx_;
  TBranch *lep2_mc3idx_branch;
  bool     lep2_mc3idx_isLoaded;
  bool     lep1_el_conv_vtx_flag_;
  TBranch *lep1_el_conv_vtx_flag_branch;
  bool     lep1_el_conv_vtx_flag_isLoaded;
  bool     lep2_el_conv_vtx_flag_;
  TBranch *lep2_el_conv_vtx_flag_branch;
  bool     lep2_el_conv_vtx_flag_isLoaded;
  int      lep1_el_exp_innerlayers_;
  TBranch *lep1_el_exp_innerlayers_branch;
  bool     lep1_el_exp_innerlayers_isLoaded;
  bool     lep1_mu_ptErr_;
  TBranch *lep1_mu_ptErr_branch;
  bool     lep1_mu_ptErr_isLoaded;
  bool     lep2_mu_ptErr_;
  TBranch *lep2_mu_ptErr_branch;
  bool     lep2_mu_ptErr_isLoaded;
  bool     lep1_el_threeChargeAgree_;
  TBranch *lep1_el_threeChargeAgree_branch;
  bool     lep1_el_threeChargeAgree_isLoaded;
  bool     lep2_el_threeChargeAgree_;
  TBranch *lep2_el_threeChargeAgree_branch;
  bool     lep2_el_threeChargeAgree_isLoaded;
  int      lep2_el_exp_innerlayers_;
  TBranch *lep2_el_exp_innerlayers_branch;
  bool     lep2_el_exp_innerlayers_isLoaded;
  float    lep1_el_etaSC_;
  TBranch *lep1_el_etaSC_branch;
  bool     lep1_el_etaSC_isLoaded;
  float    lep2_el_etaSC_;
  TBranch *lep2_el_etaSC_branch;
  bool     lep2_el_etaSC_isLoaded;
  bool     lep1_nPixelMiss_;
  TBranch *lep1_nPixelMiss_branch;
  bool     lep1_nPixelMiss_isLoaded;
  bool     lep2_nPixelMiss_;
  TBranch *lep2_nPixelMiss_branch;
  bool     lep2_nPixelMiss_isLoaded;
  bool     lep1_tightCharge_;
  TBranch *lep1_tightCharge_branch;
  bool     lep1_tightCharge_isLoaded;
  bool     lep2_tightCharge_;
  TBranch *lep2_tightCharge_branch;
  bool     lep2_tightCharge_isLoaded;
  bool     lep1_isTrigSafeNoIsov1_;
  TBranch *lep1_isTrigSafeNoIsov1_branch;
  bool     lep1_isTrigSafeNoIsov1_isLoaded;
  bool     lep1_isTrigSafev1_;
  TBranch *lep1_isTrigSafev1_branch;
  bool     lep1_isTrigSafev1_isLoaded;
  bool     lep2_isTrigSafeNoIsov1_;
  TBranch *lep2_isTrigSafeNoIsov1_branch;
  bool     lep2_isTrigSafeNoIsov1_isLoaded;
  bool     lep2_isTrigSafev1_;
  TBranch *lep2_isTrigSafev1_branch;
  bool     lep2_isTrigSafev1_isLoaded;
  bool     lep1_tightMuonPOG_;
  TBranch *lep1_tightMuonPOG_branch;
  bool     lep1_tightMuonPOG_isLoaded;
  bool     lep1_mediumMuonPOG_;
  TBranch *lep1_mediumMuonPOG_branch;
  bool     lep1_mediumMuonPOG_isLoaded;
  bool     lep1_looseMuonPOG_;
  TBranch *lep1_looseMuonPOG_branch;
  bool     lep1_looseMuonPOG_isLoaded;
  bool     lep2_tightMuonPOG_;
  TBranch *lep2_tightMuonPOG_branch;
  bool     lep2_tightMuonPOG_isLoaded;
  bool     lep2_mediumMuonPOG_;
  TBranch *lep2_mediumMuonPOG_branch;
  bool     lep2_mediumMuonPOG_isLoaded;
  bool     lep2_looseMuonPOG_;
  TBranch *lep2_looseMuonPOG_branch;
  bool     lep2_looseMuonPOG_isLoaded;
  bool     lep3_mediumMuonPOG_;
  TBranch *lep3_mediumMuonPOG_branch;
  bool     lep3_mediumMuonPOG_isLoaded;
  float    prefire_sf_;
  TBranch *prefire_sf_branch;
  bool     prefire_sf_isLoaded;
  float    prefire_sfup_;
  TBranch *prefire_sfup_branch;
  bool     prefire_sfup_isLoaded;
  float    prefire_sfdown_;
  TBranch *prefire_sfdown_branch;
  bool     prefire_sfdown_isLoaded;
  float    prefire2016_sf_;
  TBranch *prefire2016_sf_branch;
  bool     prefire2016_sf_isLoaded;
  float    prefire2016_sfup_;
  TBranch *prefire2016_sfup_branch;
  bool     prefire2016_sfup_isLoaded;
  float    prefire2016_sfdown_;
  TBranch *prefire2016_sfdown_branch;
  bool     prefire2016_sfdown_isLoaded;
  float    prefire2017_sf_;
  TBranch *prefire2017_sf_branch;
  bool     prefire2017_sf_isLoaded;
  float    prefire2017_sfup_;
  TBranch *prefire2017_sfup_branch;
  bool     prefire2017_sfup_isLoaded;
  float    prefire2017_sfdown_;
  TBranch *prefire2017_sfdown_branch;
  bool     prefire2017_sfdown_isLoaded;
  float    prefire2017ele_sf_;
  TBranch *prefire2017ele_sf_branch;
  bool     prefire2017ele_sf_isLoaded;
  float    prefire2017ele_sfup_;
  TBranch *prefire2017ele_sfup_branch;
  bool     prefire2017ele_sfup_isLoaded;
  float    prefire2017ele_sfdown_;
  TBranch *prefire2017ele_sfdown_branch;
  bool     prefire2017ele_sfdown_isLoaded;
  bool     is_fastsim_;
  TBranch *is_fastsim_branch;
  bool     is_fastsim_isLoaded;
  bool     lep1_isGoodLeg_;
  TBranch *lep1_isGoodLeg_branch;
  bool     lep1_isGoodLeg_isLoaded;
  bool     lep2_isGoodLeg_;
  TBranch *lep2_isGoodLeg_branch;
  bool     lep2_isGoodLeg_isLoaded;
  bool     lep1_isFakeLeg_;
  TBranch *lep1_isFakeLeg_branch;
  bool     lep1_isFakeLeg_isLoaded;
  bool     lep2_isFakeLeg_;
  TBranch *lep2_isFakeLeg_branch;
  bool     lep2_isFakeLeg_isLoaded;
  bool     lep1_multiIso_;
  TBranch *lep1_multiIso_branch;
  bool     lep1_multiIso_isLoaded;
  bool     lep2_multiIso_;
  TBranch *lep2_multiIso_branch;
  bool     lep2_multiIso_isLoaded;
  float    lep1_sip_;
  TBranch *lep1_sip_branch;
  bool     lep1_sip_isLoaded;
  float    lep2_sip_;
  TBranch *lep2_sip_branch;
  bool     lep2_sip_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep1_closeJet_;
  TBranch *lep1_closeJet_branch;
  bool     lep1_closeJet_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *lep2_closeJet_;
  TBranch *lep2_closeJet_branch;
  bool     lep2_closeJet_isLoaded;
  bool     passed_id_inSituFR_lep1_;
  TBranch *passed_id_inSituFR_lep1_branch;
  bool     passed_id_inSituFR_lep1_isLoaded;
  bool     passed_id_inSituFR_lep2_;
  TBranch *passed_id_inSituFR_lep2_branch;
  bool     passed_id_inSituFR_lep2_isLoaded;
  bool     fired_trigger_;
  TBranch *fired_trigger_branch;
  bool     fired_trigger_isLoaded;
  bool     fired_trigger_ss_;
  TBranch *fired_trigger_ss_branch;
  bool     fired_trigger_ss_isLoaded;
  unsigned int triggers_;
  TBranch *triggers_branch;
  bool     triggers_isLoaded;
  float    weight_btagsf_;
  TBranch *weight_btagsf_branch;
  bool     weight_btagsf_isLoaded;
  float    weight_btagsf_light_UP_;
  TBranch *weight_btagsf_light_UP_branch;
  bool     weight_btagsf_light_UP_isLoaded;
  float    weight_btagsf_light_DN_;
  TBranch *weight_btagsf_light_DN_branch;
  bool     weight_btagsf_light_DN_isLoaded;
  float    weight_btagsf_heavy_UP_;
  TBranch *weight_btagsf_heavy_UP_branch;
  bool     weight_btagsf_heavy_UP_isLoaded;
  float    weight_btagsf_heavy_DN_;
  TBranch *weight_btagsf_heavy_DN_branch;
  bool     weight_btagsf_heavy_DN_isLoaded;
  float    weight_btagsf_iter_central_;
  TBranch *weight_btagsf_iter_central_branch;
  bool     weight_btagsf_iter_central_isLoaded;
  float    weight_btagsf_iter_down_cferr1_;
  TBranch *weight_btagsf_iter_down_cferr1_branch;
  bool     weight_btagsf_iter_down_cferr1_isLoaded;
  float    weight_btagsf_iter_down_cferr2_;
  TBranch *weight_btagsf_iter_down_cferr2_branch;
  bool     weight_btagsf_iter_down_cferr2_isLoaded;
  float    weight_btagsf_iter_down_hf_;
  TBranch *weight_btagsf_iter_down_hf_branch;
  bool     weight_btagsf_iter_down_hf_isLoaded;
  float    weight_btagsf_iter_down_hfstats1_;
  TBranch *weight_btagsf_iter_down_hfstats1_branch;
  bool     weight_btagsf_iter_down_hfstats1_isLoaded;
  float    weight_btagsf_iter_down_hfstats2_;
  TBranch *weight_btagsf_iter_down_hfstats2_branch;
  bool     weight_btagsf_iter_down_hfstats2_isLoaded;
  float    weight_btagsf_iter_down_jes_;
  TBranch *weight_btagsf_iter_down_jes_branch;
  bool     weight_btagsf_iter_down_jes_isLoaded;
  float    weight_btagsf_iter_down_lf_;
  TBranch *weight_btagsf_iter_down_lf_branch;
  bool     weight_btagsf_iter_down_lf_isLoaded;
  float    weight_btagsf_iter_down_lfstats1_;
  TBranch *weight_btagsf_iter_down_lfstats1_branch;
  bool     weight_btagsf_iter_down_lfstats1_isLoaded;
  float    weight_btagsf_iter_down_lfstats2_;
  TBranch *weight_btagsf_iter_down_lfstats2_branch;
  bool     weight_btagsf_iter_down_lfstats2_isLoaded;
  float    weight_btagsf_iter_up_cferr1_;
  TBranch *weight_btagsf_iter_up_cferr1_branch;
  bool     weight_btagsf_iter_up_cferr1_isLoaded;
  float    weight_btagsf_iter_up_cferr2_;
  TBranch *weight_btagsf_iter_up_cferr2_branch;
  bool     weight_btagsf_iter_up_cferr2_isLoaded;
  float    weight_btagsf_iter_up_hf_;
  TBranch *weight_btagsf_iter_up_hf_branch;
  bool     weight_btagsf_iter_up_hf_isLoaded;
  float    weight_btagsf_iter_up_hfstats1_;
  TBranch *weight_btagsf_iter_up_hfstats1_branch;
  bool     weight_btagsf_iter_up_hfstats1_isLoaded;
  float    weight_btagsf_iter_up_hfstats2_;
  TBranch *weight_btagsf_iter_up_hfstats2_branch;
  bool     weight_btagsf_iter_up_hfstats2_isLoaded;
  float    weight_btagsf_iter_up_jes_;
  TBranch *weight_btagsf_iter_up_jes_branch;
  bool     weight_btagsf_iter_up_jes_isLoaded;
  float    weight_btagsf_iter_up_lf_;
  TBranch *weight_btagsf_iter_up_lf_branch;
  bool     weight_btagsf_iter_up_lf_isLoaded;
  float    weight_btagsf_iter_up_lfstats1_;
  TBranch *weight_btagsf_iter_up_lfstats1_branch;
  bool     weight_btagsf_iter_up_lfstats1_isLoaded;
  float    weight_btagsf_iter_up_lfstats2_;
  TBranch *weight_btagsf_iter_up_lfstats2_branch;
  bool     weight_btagsf_iter_up_lfstats2_isLoaded;
  float    weight_;
  TBranch *weight_branch;
  bool     weight_isLoaded;
  float    weight_lepsf1_;
  TBranch *weight_lepsf1_branch;
  bool     weight_lepsf1_isLoaded;
  float    weight_lepsf2_;
  TBranch *weight_lepsf2_branch;
  bool     weight_lepsf2_isLoaded;
  float    weight_lepsf3_;
  TBranch *weight_lepsf3_branch;
  bool     weight_lepsf3_isLoaded;
  float    weight_lepsf_;
  TBranch *weight_lepsf_branch;
  bool     weight_lepsf_isLoaded;
  float    weight_triggersf_;
  TBranch *weight_triggersf_branch;
  bool     weight_triggersf_isLoaded;
  float    weight_pu_;
  TBranch *weight_pu_branch;
  bool     weight_pu_isLoaded;
  float    weight_isrsf_;
  TBranch *weight_isrsf_branch;
  bool     weight_isrsf_isLoaded;
  int      year_;
  TBranch *year_branch;
  bool     year_isLoaded;
  float    yearlumi_;
  TBranch *yearlumi_branch;
  bool     yearlumi_isLoaded;
  float    weight_scale_UP_;
  TBranch *weight_scale_UP_branch;
  bool     weight_scale_UP_isLoaded;
  float    weight_scale_DN_;
  TBranch *weight_scale_DN_branch;
  bool     weight_scale_DN_isLoaded;
  float    weight_pdf_UP_;
  TBranch *weight_pdf_UP_branch;
  bool     weight_pdf_UP_isLoaded;
  float    weight_pdf_DN_;
  TBranch *weight_pdf_DN_branch;
  bool     weight_pdf_DN_isLoaded;
  float    weight_alphas_UP_;
  TBranch *weight_alphas_UP_branch;
  bool     weight_alphas_UP_isLoaded;
  float    weight_alphas_DN_;
  TBranch *weight_alphas_DN_branch;
  bool     weight_alphas_DN_isLoaded;
  float    weight_isrvar_UP_;
  TBranch *weight_isrvar_UP_branch;
  bool     weight_isrvar_UP_isLoaded;
  float    weight_isrvar_DN_;
  TBranch *weight_isrvar_DN_branch;
  bool     weight_isrvar_DN_isLoaded;
  float    weight_fsrvar_UP_;
  TBranch *weight_fsrvar_UP_branch;
  bool     weight_fsrvar_UP_isLoaded;
  float    weight_fsrvar_DN_;
  TBranch *weight_fsrvar_DN_branch;
  bool     weight_fsrvar_DN_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gl1_p4_;
  TBranch *gl1_p4_branch;
  bool     gl1_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gl2_p4_;
  TBranch *gl2_p4_branch;
  bool     gl2_p4_isLoaded;
  float    glglpt_;
  TBranch *glglpt_branch;
  bool     glglpt_isLoaded;
  float    isr_unc_;
  TBranch *isr_unc_branch;
  bool     isr_unc_isLoaded;
  int      nisrMatch_;
  TBranch *nisrMatch_branch;
  bool     nisrMatch_isLoaded;
  float    weight_isr_;
  TBranch *weight_isr_branch;
  bool     weight_isr_isLoaded;
  float    weight_isr_dy_;
  TBranch *weight_isr_dy_branch;
  bool     weight_isr_dy_isLoaded;
  float    weight_isr_tt_;
  TBranch *weight_isr_tt_branch;
  bool     weight_isr_tt_isLoaded;
  float    weight_isr_UP_;
  TBranch *weight_isr_UP_branch;
  bool     weight_isr_UP_isLoaded;
  float    weight_isr_DN_;
  TBranch *weight_isr_DN_branch;
  bool     weight_isr_DN_isLoaded;
  bool     lep3_el_etaSC_;
  TBranch *lep3_el_etaSC_branch;
  bool     lep3_el_etaSC_isLoaded;
  bool     lep3_el_conv_vtx_flag_;
  TBranch *lep3_el_conv_vtx_flag_branch;
  bool     lep3_el_conv_vtx_flag_isLoaded;
  bool     lep3_el_exp_innerlayers_;
  TBranch *lep3_el_exp_innerlayers_branch;
  bool     lep3_el_exp_innerlayers_isLoaded;
  bool     lep3_el_threeChargeAgree_;
  TBranch *lep3_el_threeChargeAgree_branch;
  bool     lep3_el_threeChargeAgree_isLoaded;
  bool     lep3_el_dxyPV_;
  TBranch *lep3_el_dxyPV_branch;
  bool     lep3_el_dxyPV_isLoaded;
  bool     lep3_el_ip3d_;
  TBranch *lep3_el_ip3d_branch;
  bool     lep3_el_ip3d_isLoaded;
  bool     lep3_el_dzPV_;
  TBranch *lep3_el_dzPV_branch;
  bool     lep3_el_dzPV_isLoaded;
  float    lep3_el_MVA_value_;
  TBranch *lep3_el_MVA_value_branch;
  bool     lep3_el_MVA_value_isLoaded;
  bool     lep3_el_MVA_;
  TBranch *lep3_el_MVA_branch;
  bool     lep3_el_MVA_isLoaded;
  bool     lep3_passes_RA5_;
  TBranch *lep3_passes_RA5_branch;
  bool     lep3_passes_RA5_isLoaded;
  bool     lep3_mu_dxyPV_;
  TBranch *lep3_mu_dxyPV_branch;
  bool     lep3_mu_dxyPV_isLoaded;
  bool     lep3_mu_ip3d_;
  TBranch *lep3_mu_ip3d_branch;
  bool     lep3_mu_ip3d_isLoaded;
  bool     lep3_mu_dzPV_;
  TBranch *lep3_mu_dzPV_branch;
  bool     lep3_mu_dzPV_isLoaded;
  bool     lep3_mu_ptErr_;
  TBranch *lep3_mu_ptErr_branch;
  bool     lep3_mu_ptErr_isLoaded;
  bool     lep4_el_etaSC_;
  TBranch *lep4_el_etaSC_branch;
  bool     lep4_el_etaSC_isLoaded;
  bool     lep4_el_conv_vtx_flag_;
  TBranch *lep4_el_conv_vtx_flag_branch;
  bool     lep4_el_conv_vtx_flag_isLoaded;
  bool     lep4_el_exp_innerlayers_;
  TBranch *lep4_el_exp_innerlayers_branch;
  bool     lep4_el_exp_innerlayers_isLoaded;
  bool     lep4_el_threeChargeAgree_;
  TBranch *lep4_el_threeChargeAgree_branch;
  bool     lep4_el_threeChargeAgree_isLoaded;
  bool     lep4_el_dxyPV_;
  TBranch *lep4_el_dxyPV_branch;
  bool     lep4_el_dxyPV_isLoaded;
  bool     lep4_el_ip3d_;
  TBranch *lep4_el_ip3d_branch;
  bool     lep4_el_ip3d_isLoaded;
  bool     lep4_el_dzPV_;
  TBranch *lep4_el_dzPV_branch;
  bool     lep4_el_dzPV_isLoaded;
  float    lep4_el_MVA_value_;
  TBranch *lep4_el_MVA_value_branch;
  bool     lep4_el_MVA_value_isLoaded;
  bool     lep4_el_MVA_;
  TBranch *lep4_el_MVA_branch;
  bool     lep4_el_MVA_isLoaded;
  bool     lep4_mu_dxyPV_;
  TBranch *lep4_mu_dxyPV_branch;
  bool     lep4_mu_dxyPV_isLoaded;
  bool     lep4_mu_ip3d_;
  TBranch *lep4_mu_ip3d_branch;
  bool     lep4_mu_ip3d_isLoaded;
  bool     lep4_mu_dzPV_;
  TBranch *lep4_mu_dzPV_branch;
  bool     lep4_mu_dzPV_isLoaded;
  bool     lep4_mu_ptErr_;
  TBranch *lep4_mu_ptErr_branch;
  bool     lep4_mu_ptErr_isLoaded;
  bool     lep3_isTrigSafeNoIsov1_;
  TBranch *lep3_isTrigSafeNoIsov1_branch;
  bool     lep3_isTrigSafeNoIsov1_isLoaded;
  bool     lep3_isTrigSafev1_;
  TBranch *lep3_isTrigSafev1_branch;
  bool     lep3_isTrigSafev1_isLoaded;
  bool     lep4_isTrigSafeNoIsov1_;
  TBranch *lep4_isTrigSafeNoIsov1_branch;
  bool     lep4_isTrigSafeNoIsov1_isLoaded;
  bool     lep4_isTrigSafev1_;
  TBranch *lep4_isTrigSafev1_branch;
  bool     lep4_isTrigSafev1_isLoaded;
  int      extragenb_;
  TBranch *extragenb_branch;
  bool     extragenb_isLoaded;
  vector<int> *extragenbmoms_;
  TBranch *extragenbmoms_branch;
  bool     extragenbmoms_isLoaded;
  int      extragenc_;
  TBranch *extragenc_branch;
  bool     extragenc_isLoaded;
  vector<int> *extragencmoms_;
  TBranch *extragencmoms_branch;
  bool     extragencmoms_isLoaded;
  int      ngenjets_;
  TBranch *ngenjets_branch;
  bool     ngenjets_isLoaded;
  float    genht_;
  TBranch *genht_branch;
  bool     genht_isLoaded;
  int      ngenjets30_;
  TBranch *ngenjets30_branch;
  bool     ngenjets30_isLoaded;
  float    genht30_;
  TBranch *genht30_branch;
  bool     genht30_isLoaded;
  bool     passfilter_;
  TBranch *passfilter_branch;
  bool     passfilter_isLoaded;
  bool     hasgammatoll_;
  TBranch *hasgammatoll_branch;
  bool     hasgammatoll_isLoaded;
  bool     gammatollmomemu_;
  TBranch *gammatollmomemu_branch;
  bool     gammatollmomemu_isLoaded;
  float    gammatolldr_;
  TBranch *gammatolldr_branch;
  bool     gammatolldr_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gammatoll1_;
  TBranch *gammatoll1_branch;
  bool     gammatoll1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gammatoll2_;
  TBranch *gammatoll2_branch;
  bool     gammatoll2_isLoaded;
  vector<int> *bjet_type_;
  TBranch *bjet_type_branch;
  bool     bjet_type_isLoaded;
  vector<int> *jet_type_;
  TBranch *jet_type_branch;
  bool     jet_type_isLoaded;
  vector<int> *jet_cat_;
  TBranch *jet_cat_branch;
  bool     jet_cat_isLoaded;
  vector<int> *jet_matchedGenIndex_;
  TBranch *jet_matchedGenIndex_branch;
  bool     jet_matchedGenIndex_isLoaded;
  vector<int> *jet_matchedGenId_;
  TBranch *jet_matchedGenId_branch;
  bool     jet_matchedGenId_isLoaded;
  vector<int> *jet_matchedGenMId_;
  TBranch *jet_matchedGenMId_branch;
  bool     jet_matchedGenMId_isLoaded;
  vector<float> *jet_matchedDr_;
  TBranch *jet_matchedDr_branch;
  bool     jet_matchedDr_isLoaded;
  vector<float> *jet_matchedPtDiff_;
  TBranch *jet_matchedPtDiff_branch;
  bool     jet_matchedPtDiff_isLoaded;
  int      ndrlt0p4_;
  TBranch *ndrlt0p4_branch;
  bool     ndrlt0p4_isLoaded;
  bool     gengood_;
  TBranch *gengood_branch;
  bool     gengood_isLoaded;
  int      nleptonic_;
  TBranch *nleptonic_branch;
  bool     nleptonic_isLoaded;
  int      ntau_;
  TBranch *ntau_branch;
  bool     ntau_isLoaded;
  int      nleptonicW_;
  TBranch *nleptonicW_branch;
  bool     nleptonicW_isLoaded;
  float    mfourtop_;
  TBranch *mfourtop_branch;
  bool     mfourtop_isLoaded;
  int      nhadronicW_;
  TBranch *nhadronicW_branch;
  bool     nhadronicW_isLoaded;
  int      nW_;
  TBranch *nW_branch;
  bool     nW_isLoaded;
  float    leptonicWSF_;
  TBranch *leptonicWSF_branch;
  bool     leptonicWSF_isLoaded;
  float    hadronicWSF_;
  TBranch *hadronicWSF_branch;
  bool     hadronicWSF_isLoaded;
  float    decayWSF_;
  TBranch *decayWSF_branch;
  bool     decayWSF_isLoaded;
  int      njincone1_;
  TBranch *njincone1_branch;
  bool     njincone1_isLoaded;
  int      njincone2_;
  TBranch *njincone2_branch;
  bool     njincone2_isLoaded;
  int      bdt_nforwardjets20_;
  TBranch *bdt_nforwardjets20_branch;
  bool     bdt_nforwardjets20_isLoaded;
  float    bdt_avgcdisc_;
  TBranch *bdt_avgcdisc_branch;
  bool     bdt_avgcdisc_isLoaded;
  float    bdt_nbtags_;
  TBranch *bdt_nbtags_branch;
  bool     bdt_nbtags_isLoaded;
  float    bdt_njets_;
  TBranch *bdt_njets_branch;
  bool     bdt_njets_isLoaded;
  float    bdt_met_;
  TBranch *bdt_met_branch;
  bool     bdt_met_isLoaded;
  float    bdt_ptl2_;
  TBranch *bdt_ptl2_branch;
  bool     bdt_ptl2_isLoaded;
  float    bdt_nlb40_;
  TBranch *bdt_nlb40_branch;
  bool     bdt_nlb40_isLoaded;
  float    bdt_ntb40_;
  TBranch *bdt_ntb40_branch;
  bool     bdt_ntb40_isLoaded;
  float    bdt_nleps_;
  TBranch *bdt_nleps_branch;
  bool     bdt_nleps_isLoaded;
  float    bdt_htb_;
  TBranch *bdt_htb_branch;
  bool     bdt_htb_isLoaded;
  float    bdt_ml1j1_;
  TBranch *bdt_ml1j1_branch;
  bool     bdt_ml1j1_isLoaded;
  float    bdt_dphil1l2_;
  TBranch *bdt_dphil1l2_branch;
  bool     bdt_dphil1l2_isLoaded;
  float    bdt_maxmjoverpt_;
  TBranch *bdt_maxmjoverpt_branch;
  bool     bdt_maxmjoverpt_isLoaded;
  float    bdt_detal1l2_;
  TBranch *bdt_detal1l2_branch;
  bool     bdt_detal1l2_isLoaded;
  float    bdt_q1_;
  TBranch *bdt_q1_branch;
  bool     bdt_q1_isLoaded;
  float    bdt_ptj1_;
  TBranch *bdt_ptj1_branch;
  bool     bdt_ptj1_isLoaded;
  float    bdt_ptj6_;
  TBranch *bdt_ptj6_branch;
  bool     bdt_ptj6_isLoaded;
  float    bdt_ptj7_;
  TBranch *bdt_ptj7_branch;
  bool     bdt_ptj7_isLoaded;
  float    bdt_ptj8_;
  TBranch *bdt_ptj8_branch;
  bool     bdt_ptj8_isLoaded;
  float    bdt_ptl1_;
  TBranch *bdt_ptl1_branch;
  bool     bdt_ptl1_isLoaded;
  float    bdt_ptl3_;
  TBranch *bdt_ptl3_branch;
  bool     bdt_ptl3_isLoaded;
  float    bdt_jec_up_nbtags_;
  TBranch *bdt_jec_up_nbtags_branch;
  bool     bdt_jec_up_nbtags_isLoaded;
  float    bdt_jec_dn_nbtags_;
  TBranch *bdt_jec_dn_nbtags_branch;
  bool     bdt_jec_dn_nbtags_isLoaded;
  float    bdt_jer_up_nbtags_;
  TBranch *bdt_jer_up_nbtags_branch;
  bool     bdt_jer_up_nbtags_isLoaded;
  float    bdt_jer_dn_nbtags_;
  TBranch *bdt_jer_dn_nbtags_branch;
  bool     bdt_jer_dn_nbtags_isLoaded;
  float    bdt_jec_up_njets_;
  TBranch *bdt_jec_up_njets_branch;
  bool     bdt_jec_up_njets_isLoaded;
  float    bdt_jec_dn_njets_;
  TBranch *bdt_jec_dn_njets_branch;
  bool     bdt_jec_dn_njets_isLoaded;
  float    bdt_jer_up_njets_;
  TBranch *bdt_jer_up_njets_branch;
  bool     bdt_jer_up_njets_isLoaded;
  float    bdt_jer_dn_njets_;
  TBranch *bdt_jer_dn_njets_branch;
  bool     bdt_jer_dn_njets_isLoaded;
  float    bdt_jec_up_met_;
  TBranch *bdt_jec_up_met_branch;
  bool     bdt_jec_up_met_isLoaded;
  float    bdt_jec_dn_met_;
  TBranch *bdt_jec_dn_met_branch;
  bool     bdt_jec_dn_met_isLoaded;
  float    bdt_jer_up_met_;
  TBranch *bdt_jer_up_met_branch;
  bool     bdt_jer_up_met_isLoaded;
  float    bdt_jer_dn_met_;
  TBranch *bdt_jer_dn_met_branch;
  bool     bdt_jer_dn_met_isLoaded;
  float    bdt_jec_up_htb_;
  TBranch *bdt_jec_up_htb_branch;
  bool     bdt_jec_up_htb_isLoaded;
  float    bdt_jec_dn_htb_;
  TBranch *bdt_jec_dn_htb_branch;
  bool     bdt_jec_dn_htb_isLoaded;
  float    bdt_jer_up_htb_;
  TBranch *bdt_jer_up_htb_branch;
  bool     bdt_jer_up_htb_isLoaded;
  float    bdt_jer_dn_htb_;
  TBranch *bdt_jer_dn_htb_branch;
  bool     bdt_jer_dn_htb_isLoaded;
  float    bdt_jec_up_nlb40_;
  TBranch *bdt_jec_up_nlb40_branch;
  bool     bdt_jec_up_nlb40_isLoaded;
  float    bdt_jec_dn_nlb40_;
  TBranch *bdt_jec_dn_nlb40_branch;
  bool     bdt_jec_dn_nlb40_isLoaded;
  float    bdt_jer_up_nlb40_;
  TBranch *bdt_jer_up_nlb40_branch;
  bool     bdt_jer_up_nlb40_isLoaded;
  float    bdt_jer_dn_nlb40_;
  TBranch *bdt_jer_dn_nlb40_branch;
  bool     bdt_jer_dn_nlb40_isLoaded;
  float    bdt_jec_up_ntb40_;
  TBranch *bdt_jec_up_ntb40_branch;
  bool     bdt_jec_up_ntb40_isLoaded;
  float    bdt_jec_dn_ntb40_;
  TBranch *bdt_jec_dn_ntb40_branch;
  bool     bdt_jec_dn_ntb40_isLoaded;
  float    bdt_jer_up_ntb40_;
  TBranch *bdt_jer_up_ntb40_branch;
  bool     bdt_jer_up_ntb40_isLoaded;
  float    bdt_jer_dn_ntb40_;
  TBranch *bdt_jer_dn_ntb40_branch;
  bool     bdt_jer_dn_ntb40_isLoaded;
  float    bdt_disc_;
  TBranch *bdt_disc_branch;
  bool     bdt_disc_isLoaded;
  float    bdt_disc_jec_up_;
  TBranch *bdt_disc_jec_up_branch;
  bool     bdt_disc_jec_up_isLoaded;
  float    bdt_disc_jer_up_;
  TBranch *bdt_disc_jer_up_branch;
  bool     bdt_disc_jer_up_isLoaded;
  float    bdt_disc_jec_dn_;
  TBranch *bdt_disc_jec_dn_branch;
  bool     bdt_disc_jec_dn_isLoaded;
  float    bdt_disc_jer_dn_;
  TBranch *bdt_disc_jer_dn_branch;
  bool     bdt_disc_jer_dn_isLoaded;
  float    bdt_run2_disc_;
  TBranch *bdt_run2_disc_branch;
  bool     bdt_run2_disc_isLoaded;
  int      bdt_run2_SRDISC_;
  TBranch *bdt_run2_SRDISC_branch;
  bool     bdt_run2_SRDISC_isLoaded;
  float    bdt_run2_disc_jec_up_;
  TBranch *bdt_run2_disc_jec_up_branch;
  bool     bdt_run2_disc_jec_up_isLoaded;
  float    bdt_run2_disc_jer_up_;
  TBranch *bdt_run2_disc_jer_up_branch;
  bool     bdt_run2_disc_jer_up_isLoaded;
  float    bdt_run2_disc_jec_dn_;
  TBranch *bdt_run2_disc_jec_dn_branch;
  bool     bdt_run2_disc_jec_dn_isLoaded;
  float    bdt_run2_disc_jer_dn_;
  TBranch *bdt_run2_disc_jer_dn_branch;
  bool     bdt_run2_disc_jer_dn_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const bool &lep1_isPrompt();
  const bool &lep1_isDirectPrompt();
  const bool &lep1_isStat3();
  const bool &lep2_isPrompt();
  const bool &lep2_isDirectPrompt();
  const bool &lep2_isStat3();
  const float &met();
  const float &metPhi();
  const float &rawmet();
  const float &rawmetPhi();
  const float &calomet();
  const float &calometPhi();
  const unsigned long long &event();
  const int &lumi();
  const int &run();
  const bool &filt_csc();
  const bool &filt_hbhe();
  const bool &filt_hcallaser();
  const bool &filt_ecaltp();
  const bool &filt_trkfail();
  const bool &is_real_data();
  const float &scale1fb();
  const float &genps_weight();
  const float &xsec();
  const int &neventstotal();
  const float &xsec_ps();
  const vector<TString> &sparmNames();
  const vector<float> &sparms();
  const float &xsec_error();
  const float &kfactor();
  const float &gen_met();
  const vector<float> &pdfweights();
  const float &gen_met_phi();
  const bool &skim();
  const bool &skim_nomet();
  const int &nleps();
  const int &sr();
  const bool &br();
  const int &ss_nleps();
  const bool &ss_br();
  const int &ss_sr();
  const int &ss_region();
  const int &njets();
  const int &njetsAG();
  const int &nbtagsAG();
  const int &njets_raw();
  const int &hyp_class();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
  const float &lep1_pt();
  const float &lep2_pt();
  const float &lep3_pt();
  const float &lep1_eta();
  const float &lep2_eta();
  const float &lep3_eta();
  const float &lep1_phi();
  const float &lep2_phi();
  const float &lep3_phi();
  const float &ht_raw();
  const float &ht();
  const int &lep1_motherID();
  const int &lep2_motherID();
  const int &lep1_mc_id();
  const int &lep2_mc_id();
  const int &lep1_mc_motherid();
  const int &lep2_mc_motherid();
  const int &lep1_id();
  const int &lep2_id();
  const float &lep1_coneCorrPt();
  const float &lep2_coneCorrPt();
  const float &lep3_coneCorrPt();
  const float &lep4_coneCorrPt();
  const int &lep1_idx();
  const int &lep2_idx();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jec_up();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jec_dn();
  const vector<float> &jets_disc_up();
  const vector<float> &jets_disc_dn();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &bjets_jec_up();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &bjets_jec_dn();
  const vector<int> &btags_flavor();
  const vector<float> &btags_disc();
  const vector<float> &btags_cdisc();
  const vector<int> &jets_flavor();
  const vector<float> &jets_disc();
  const vector<float> &jets_bsf();
  const vector<float> &jets_JEC();
  const vector<float> &btags_JEC();
  const vector<float> &jets_undoJEC();
  const vector<float> &btags_undoJEC();
  const vector<float> &btags_unc();
  const vector<float> &btags_eff();
  const vector<float> &btags_effpt();
  const vector<float> &btags_sf();
  const vector<float> &jets_unc();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &btags();
  const int &nbtags();
  const int &nbtags_raw();
  const float &sf_dilepTrig_hpt();
  const float &sf_dilepTrig_lpt();
  const float &sf_dilepTrig_vlpt();
  const int &hyp_type();
  const float &sf_dilep_eff();
  const float &mt();
  const float &mt_l2();
  const float &mt2();
  const float &mtmin();
  const int &lep1_id_gen();
  const int &lep2_id_gen();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4_gen();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4_gen();
  const int &lep3_id();
  const int &lep3_idx();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep3_p4();
  const int &lep3_quality();
  const int &lep4_id();
  const int &lep4_idx();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep4_p4();
  const float &lep1_iso();
  const float &lep2_iso();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &dilep_p4();
  const float &dilep_mass();
  const float &mass13();
  const float &mass23();
  const float &mass123();
  const int &ncharginos();
  const int &nhiggs();
  const int &higgs_mass();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genjets_p4();
  const vector<int> &genps_id();
  const vector<int> &genps_id_mother();
  const vector<int> &genps_idx_mother();
  const vector<int> &genps_status();
  const vector<int> &genps_id_grandma();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &all_leps_p4();
  const vector<int> &all_leps_id();
  const vector<bool> &all_leps_veto();
  const vector<int> &all_leps_mc3idx();
  const bool &lep1_passes_id();
  const bool &lep2_passes_id();
  const bool &lep3_passes_id();
  const bool &lep4_passes_id();
  const bool &lep1_tight();
  const bool &lep1_veto();
  const bool &lep1_fo();
  const bool &lep2_tight();
  const bool &lep2_veto();
  const bool &lep2_fo();
  const bool &lep3_tight();
  const bool &lep3_veto();
  const bool &lep3_fo();
  const bool &lep4_tight();
  const bool &lep4_veto();
  const bool &lep4_fo();
  const float &lep1_dxyPV();
  const float &lep2_dxyPV();
  const float &lep1_dZ();
  const float &lep2_dZ();
  const float &lep1_d0_err();
  const float &lep2_d0_err();
  const float &lep1_ip3d();
  const float &lep2_ip3d();
  const float &lep1_MVA();
  const float &lep2_MVA();
  const float &lep1_ip3d_err();
  const float &lep2_ip3d_err();
  const int &nVetoElectrons7();
  const int &nVetoElectrons10();
  const int &nVetoElectrons25();
  const int &nVetoMuons5();
  const int &nVetoMuons10();
  const int &nVetoMuons25();
  const string &filename();
  const float &lep1_ptrel_ma();
  const float &lep1_ptratio_ma();
  const float &lep2_ptrel_ma();
  const float &lep2_ptratio_ma();
  const float &lep1_ptrel_v1();
  const float &lep2_ptrel_v1();
  const float &lep1_ptratio();
  const float &lep2_ptratio();
  const float &lep1_miniIso();
  const float &lep2_miniIso();
  const vector<float> &trueNumInt();
  const int &nGoodVertices();
  const bool &lep1_trigMatch_noIsoReq();
  const bool &lep1_trigMatch_isoReq();
  const bool &lep2_trigMatch_noIsoReq();
  const bool &lep2_trigMatch_isoReq();
  const bool &passes_met_filters();
  const bool &passes_chargedcand_filter();
  const float &evt_egclean_pfmet();
  const float &evt_muegclean_pfmet();
  const float &evt_muegcleanfix_pfmet();
  const float &evt_uncorr_pfmet();
  const bool &filt_noBadMuons();
  const bool &filt_duplicateMuons();
  const bool &filt_badMuons();
  const bool &failsRA2Filter();
  const bool &madeExtraZ();
  const bool &madeExtraG();
  const int &lep3_mcid();
  const int &lep3_mc_motherid();
  const int &lep3_mc3idx();
  const int &lep3_motherID();
  const int &lep4_mcid();
  const int &lep4_mcidx();
  const int &njets_unc_up();
  const int &njets_unc_dn();
  const float &ht_unc_up();
  const float &ht_unc_dn();
  const int &nbtags_unc_up();
  const int &nbtags_unc_dn();
  const float &met_unc_up();
  const float &met_unc_dn();
  const float &metPhi_unc_up();
  const float &metPhi_unc_dn();
  const int &njets_JER_up();
  const int &njets_JER_dn();
  const float &ht_JER_up();
  const float &ht_JER_dn();
  const int &nbtags_JER_up();
  const int &nbtags_JER_dn();
  const float &met_JER_up();
  const float &met_JER_dn();
  const float &metPhi_JER_up();
  const float &metPhi_JER_dn();
  const bool &lep2_genps_isHardProcess();
  const bool &lep2_genps_fromHardProcessFinalState();
  const bool &lep2_genps_fromHardProcessDecayed();
  const bool &lep2_genps_isDirectHardProcessTauDecayProductFinalState();
  const bool &lep2_genps_fromHardProcessBeforeFSR();
  const bool &lep2_genps_isLastCopy();
  const bool &lep2_genps_isLastCopyBeforeFSR();
  const bool &lep1_genps_isHardProcess();
  const bool &lep1_genps_fromHardProcessFinalState();
  const bool &lep1_genps_fromHardProcessDecayed();
  const bool &lep1_genps_isDirectHardProcessTauDecayProductFinalState();
  const bool &lep1_genps_fromHardProcessBeforeFSR();
  const bool &lep1_genps_isLastCopy();
  const bool &lep1_genps_isLastCopyBeforeFSR();
  const int &lep1_mc3idx();
  const int &lep2_mc3idx();
  const bool &lep1_el_conv_vtx_flag();
  const bool &lep2_el_conv_vtx_flag();
  const int &lep1_el_exp_innerlayers();
  const bool &lep1_mu_ptErr();
  const bool &lep2_mu_ptErr();
  const bool &lep1_el_threeChargeAgree();
  const bool &lep2_el_threeChargeAgree();
  const int &lep2_el_exp_innerlayers();
  const float &lep1_el_etaSC();
  const float &lep2_el_etaSC();
  const bool &lep1_nPixelMiss();
  const bool &lep2_nPixelMiss();
  const bool &lep1_tightCharge();
  const bool &lep2_tightCharge();
  const bool &lep1_isTrigSafeNoIsov1();
  const bool &lep1_isTrigSafev1();
  const bool &lep2_isTrigSafeNoIsov1();
  const bool &lep2_isTrigSafev1();
  const bool &lep1_tightMuonPOG();
  const bool &lep1_mediumMuonPOG();
  const bool &lep1_looseMuonPOG();
  const bool &lep2_tightMuonPOG();
  const bool &lep2_mediumMuonPOG();
  const bool &lep2_looseMuonPOG();
  const bool &lep3_mediumMuonPOG();
  const float &prefire_sf();
  const float &prefire_sfup();
  const float &prefire_sfdown();
  const float &prefire2016_sf();
  const float &prefire2016_sfup();
  const float &prefire2016_sfdown();
  const float &prefire2017_sf();
  const float &prefire2017_sfup();
  const float &prefire2017_sfdown();
  const float &prefire2017ele_sf();
  const float &prefire2017ele_sfup();
  const float &prefire2017ele_sfdown();
  const bool &is_fastsim();
  const bool &lep1_isGoodLeg();
  const bool &lep2_isGoodLeg();
  const bool &lep1_isFakeLeg();
  const bool &lep2_isFakeLeg();
  const bool &lep1_multiIso();
  const bool &lep2_multiIso();
  const float &lep1_sip();
  const float &lep2_sip();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_closeJet();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_closeJet();
  const bool &passed_id_inSituFR_lep1();
  const bool &passed_id_inSituFR_lep2();
  const bool &fired_trigger();
  const bool &fired_trigger_ss();
  const unsigned int &triggers();
  const float &weight_btagsf();
  const float &weight_btagsf_light_UP();
  const float &weight_btagsf_light_DN();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_iter_central();
  const float &weight_btagsf_iter_down_cferr1();
  const float &weight_btagsf_iter_down_cferr2();
  const float &weight_btagsf_iter_down_hf();
  const float &weight_btagsf_iter_down_hfstats1();
  const float &weight_btagsf_iter_down_hfstats2();
  const float &weight_btagsf_iter_down_jes();
  const float &weight_btagsf_iter_down_lf();
  const float &weight_btagsf_iter_down_lfstats1();
  const float &weight_btagsf_iter_down_lfstats2();
  const float &weight_btagsf_iter_up_cferr1();
  const float &weight_btagsf_iter_up_cferr2();
  const float &weight_btagsf_iter_up_hf();
  const float &weight_btagsf_iter_up_hfstats1();
  const float &weight_btagsf_iter_up_hfstats2();
  const float &weight_btagsf_iter_up_jes();
  const float &weight_btagsf_iter_up_lf();
  const float &weight_btagsf_iter_up_lfstats1();
  const float &weight_btagsf_iter_up_lfstats2();
  const float &weight();
  const float &weight_lepsf1();
  const float &weight_lepsf2();
  const float &weight_lepsf3();
  const float &weight_lepsf();
  const float &weight_triggersf();
  const float &weight_pu();
  const float &weight_isrsf();
  const int &year();
  const float &yearlumi();
  const float &weight_scale_UP();
  const float &weight_scale_DN();
  const float &weight_pdf_UP();
  const float &weight_pdf_DN();
  const float &weight_alphas_UP();
  const float &weight_alphas_DN();
  const float &weight_isrvar_UP();
  const float &weight_isrvar_DN();
  const float &weight_fsrvar_UP();
  const float &weight_fsrvar_DN();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gl1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gl2_p4();
  const float &glglpt();
  const float &isr_unc();
  const int &nisrMatch();
  const float &weight_isr();
  const float &weight_isr_dy();
  const float &weight_isr_tt();
  const float &weight_isr_UP();
  const float &weight_isr_DN();
  const bool &lep3_el_etaSC();
  const bool &lep3_el_conv_vtx_flag();
  const bool &lep3_el_exp_innerlayers();
  const bool &lep3_el_threeChargeAgree();
  const bool &lep3_el_dxyPV();
  const bool &lep3_el_ip3d();
  const bool &lep3_el_dzPV();
  const float &lep3_el_MVA_value();
  const bool &lep3_el_MVA();
  const bool &lep3_passes_RA5();
  const bool &lep3_mu_dxyPV();
  const bool &lep3_mu_ip3d();
  const bool &lep3_mu_dzPV();
  const bool &lep3_mu_ptErr();
  const bool &lep4_el_etaSC();
  const bool &lep4_el_conv_vtx_flag();
  const bool &lep4_el_exp_innerlayers();
  const bool &lep4_el_threeChargeAgree();
  const bool &lep4_el_dxyPV();
  const bool &lep4_el_ip3d();
  const bool &lep4_el_dzPV();
  const float &lep4_el_MVA_value();
  const bool &lep4_el_MVA();
  const bool &lep4_mu_dxyPV();
  const bool &lep4_mu_ip3d();
  const bool &lep4_mu_dzPV();
  const bool &lep4_mu_ptErr();
  const bool &lep3_isTrigSafeNoIsov1();
  const bool &lep3_isTrigSafev1();
  const bool &lep4_isTrigSafeNoIsov1();
  const bool &lep4_isTrigSafev1();
  const int &extragenb();
  const vector<int> &extragenbmoms();
  const int &extragenc();
  const vector<int> &extragencmoms();
  const int &ngenjets();
  const float &genht();
  const int &ngenjets30();
  const float &genht30();
  const bool &passfilter();
  const bool &hasgammatoll();
  const bool &gammatollmomemu();
  const float &gammatolldr();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gammatoll1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gammatoll2();
  const vector<int> &bjet_type();
  const vector<int> &jet_type();
  const vector<int> &jet_cat();
  const vector<int> &jet_matchedGenIndex();
  const vector<int> &jet_matchedGenId();
  const vector<int> &jet_matchedGenMId();
  const vector<float> &jet_matchedDr();
  const vector<float> &jet_matchedPtDiff();
  const int &ndrlt0p4();
  const bool &gengood();
  const int &nleptonic();
  const int &ntau();
  const int &nleptonicW();
  const float &mfourtop();
  const int &nhadronicW();
  const int &nW();
  const float &leptonicWSF();
  const float &hadronicWSF();
  const float &decayWSF();
  const int &njincone1();
  const int &njincone2();
  const int &bdt_nforwardjets20();
  const float &bdt_avgcdisc();
  const float &bdt_nbtags();
  const float &bdt_njets();
  const float &bdt_met();
  const float &bdt_ptl2();
  const float &bdt_nlb40();
  const float &bdt_ntb40();
  const float &bdt_nleps();
  const float &bdt_htb();
  const float &bdt_ml1j1();
  const float &bdt_dphil1l2();
  const float &bdt_maxmjoverpt();
  const float &bdt_detal1l2();
  const float &bdt_q1();
  const float &bdt_ptj1();
  const float &bdt_ptj6();
  const float &bdt_ptj7();
  const float &bdt_ptj8();
  const float &bdt_ptl1();
  const float &bdt_ptl3();
  const float &bdt_jec_up_nbtags();
  const float &bdt_jec_dn_nbtags();
  const float &bdt_jer_up_nbtags();
  const float &bdt_jer_dn_nbtags();
  const float &bdt_jec_up_njets();
  const float &bdt_jec_dn_njets();
  const float &bdt_jer_up_njets();
  const float &bdt_jer_dn_njets();
  const float &bdt_jec_up_met();
  const float &bdt_jec_dn_met();
  const float &bdt_jer_up_met();
  const float &bdt_jer_dn_met();
  const float &bdt_jec_up_htb();
  const float &bdt_jec_dn_htb();
  const float &bdt_jer_up_htb();
  const float &bdt_jer_dn_htb();
  const float &bdt_jec_up_nlb40();
  const float &bdt_jec_dn_nlb40();
  const float &bdt_jer_up_nlb40();
  const float &bdt_jer_dn_nlb40();
  const float &bdt_jec_up_ntb40();
  const float &bdt_jec_dn_ntb40();
  const float &bdt_jer_up_ntb40();
  const float &bdt_jer_dn_ntb40();
  const float &bdt_disc();
  const float &bdt_disc_jec_up();
  const float &bdt_disc_jer_up();
  const float &bdt_disc_jec_dn();
  const float &bdt_disc_jer_dn();
  const float &bdt_run2_disc();
  const int &bdt_run2_SRDISC();
  const float &bdt_run2_disc_jec_up();
  const float &bdt_run2_disc_jer_up();
  const float &bdt_run2_disc_jec_dn();
  const float &bdt_run2_disc_jer_dn();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern SSAG samesign;
#endif

namespace ss {
  const bool &lep1_isPrompt();
  const bool &lep1_isDirectPrompt();
  const bool &lep1_isStat3();
  const bool &lep2_isPrompt();
  const bool &lep2_isDirectPrompt();
  const bool &lep2_isStat3();
  const float &met();
  const float &metPhi();
  const float &rawmet();
  const float &rawmetPhi();
  const float &calomet();
  const float &calometPhi();
  const unsigned long long &event();
  const int &lumi();
  const int &run();
  const bool &filt_csc();
  const bool &filt_hbhe();
  const bool &filt_hcallaser();
  const bool &filt_ecaltp();
  const bool &filt_trkfail();
  const bool &is_real_data();
  const float &scale1fb();
  const float &genps_weight();
  const float &xsec();
  const int &neventstotal();
  const float &xsec_ps();
  const vector<TString> &sparmNames();
  const vector<float> &sparms();
  const float &xsec_error();
  const float &kfactor();
  const float &gen_met();
  const vector<float> &pdfweights();
  const float &gen_met_phi();
  const bool &skim();
  const bool &skim_nomet();
  const int &nleps();
  const int &sr();
  const bool &br();
  const int &ss_nleps();
  const bool &ss_br();
  const int &ss_sr();
  const int &ss_region();
  const int &njets();
  const int &njetsAG();
  const int &nbtagsAG();
  const int &njets_raw();
  const int &hyp_class();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4();
  const float &lep1_pt();
  const float &lep2_pt();
  const float &lep3_pt();
  const float &lep1_eta();
  const float &lep2_eta();
  const float &lep3_eta();
  const float &lep1_phi();
  const float &lep2_phi();
  const float &lep3_phi();
  const float &ht_raw();
  const float &ht();
  const int &lep1_motherID();
  const int &lep2_motherID();
  const int &lep1_mc_id();
  const int &lep2_mc_id();
  const int &lep1_mc_motherid();
  const int &lep2_mc_motherid();
  const int &lep1_id();
  const int &lep2_id();
  const float &lep1_coneCorrPt();
  const float &lep2_coneCorrPt();
  const float &lep3_coneCorrPt();
  const float &lep4_coneCorrPt();
  const int &lep1_idx();
  const int &lep2_idx();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jec_up();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jec_dn();
  const vector<float> &jets_disc_up();
  const vector<float> &jets_disc_dn();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &bjets_jec_up();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &bjets_jec_dn();
  const vector<int> &btags_flavor();
  const vector<float> &btags_disc();
  const vector<float> &btags_cdisc();
  const vector<int> &jets_flavor();
  const vector<float> &jets_disc();
  const vector<float> &jets_bsf();
  const vector<float> &jets_JEC();
  const vector<float> &btags_JEC();
  const vector<float> &jets_undoJEC();
  const vector<float> &btags_undoJEC();
  const vector<float> &btags_unc();
  const vector<float> &btags_eff();
  const vector<float> &btags_effpt();
  const vector<float> &btags_sf();
  const vector<float> &jets_unc();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &btags();
  const int &nbtags();
  const int &nbtags_raw();
  const float &sf_dilepTrig_hpt();
  const float &sf_dilepTrig_lpt();
  const float &sf_dilepTrig_vlpt();
  const int &hyp_type();
  const float &sf_dilep_eff();
  const float &mt();
  const float &mt_l2();
  const float &mt2();
  const float &mtmin();
  const int &lep1_id_gen();
  const int &lep2_id_gen();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_p4_gen();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_p4_gen();
  const int &lep3_id();
  const int &lep3_idx();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep3_p4();
  const int &lep3_quality();
  const int &lep4_id();
  const int &lep4_idx();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep4_p4();
  const float &lep1_iso();
  const float &lep2_iso();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &dilep_p4();
  const float &dilep_mass();
  const float &mass13();
  const float &mass23();
  const float &mass123();
  const int &ncharginos();
  const int &nhiggs();
  const int &higgs_mass();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genjets_p4();
  const vector<int> &genps_id();
  const vector<int> &genps_id_mother();
  const vector<int> &genps_idx_mother();
  const vector<int> &genps_status();
  const vector<int> &genps_id_grandma();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &all_leps_p4();
  const vector<int> &all_leps_id();
  const vector<bool> &all_leps_veto();
  const vector<int> &all_leps_mc3idx();
  const bool &lep1_passes_id();
  const bool &lep2_passes_id();
  const bool &lep3_passes_id();
  const bool &lep4_passes_id();
  const bool &lep1_tight();
  const bool &lep1_veto();
  const bool &lep1_fo();
  const bool &lep2_tight();
  const bool &lep2_veto();
  const bool &lep2_fo();
  const bool &lep3_tight();
  const bool &lep3_veto();
  const bool &lep3_fo();
  const bool &lep4_tight();
  const bool &lep4_veto();
  const bool &lep4_fo();
  const float &lep1_dxyPV();
  const float &lep2_dxyPV();
  const float &lep1_dZ();
  const float &lep2_dZ();
  const float &lep1_d0_err();
  const float &lep2_d0_err();
  const float &lep1_ip3d();
  const float &lep2_ip3d();
  const float &lep1_MVA();
  const float &lep2_MVA();
  const float &lep1_ip3d_err();
  const float &lep2_ip3d_err();
  const int &nVetoElectrons7();
  const int &nVetoElectrons10();
  const int &nVetoElectrons25();
  const int &nVetoMuons5();
  const int &nVetoMuons10();
  const int &nVetoMuons25();
  const string &filename();
  const float &lep1_ptrel_ma();
  const float &lep1_ptratio_ma();
  const float &lep2_ptrel_ma();
  const float &lep2_ptratio_ma();
  const float &lep1_ptrel_v1();
  const float &lep2_ptrel_v1();
  const float &lep1_ptratio();
  const float &lep2_ptratio();
  const float &lep1_miniIso();
  const float &lep2_miniIso();
  const vector<float> &trueNumInt();
  const int &nGoodVertices();
  const bool &lep1_trigMatch_noIsoReq();
  const bool &lep1_trigMatch_isoReq();
  const bool &lep2_trigMatch_noIsoReq();
  const bool &lep2_trigMatch_isoReq();
  const bool &passes_met_filters();
  const bool &passes_chargedcand_filter();
  const float &evt_egclean_pfmet();
  const float &evt_muegclean_pfmet();
  const float &evt_muegcleanfix_pfmet();
  const float &evt_uncorr_pfmet();
  const bool &filt_noBadMuons();
  const bool &filt_duplicateMuons();
  const bool &filt_badMuons();
  const bool &failsRA2Filter();
  const bool &madeExtraZ();
  const bool &madeExtraG();
  const int &lep3_mcid();
  const int &lep3_mc_motherid();
  const int &lep3_mc3idx();
  const int &lep3_motherID();
  const int &lep4_mcid();
  const int &lep4_mcidx();
  const int &njets_unc_up();
  const int &njets_unc_dn();
  const float &ht_unc_up();
  const float &ht_unc_dn();
  const int &nbtags_unc_up();
  const int &nbtags_unc_dn();
  const float &met_unc_up();
  const float &met_unc_dn();
  const float &metPhi_unc_up();
  const float &metPhi_unc_dn();
  const int &njets_JER_up();
  const int &njets_JER_dn();
  const float &ht_JER_up();
  const float &ht_JER_dn();
  const int &nbtags_JER_up();
  const int &nbtags_JER_dn();
  const float &met_JER_up();
  const float &met_JER_dn();
  const float &metPhi_JER_up();
  const float &metPhi_JER_dn();
  const bool &lep2_genps_isHardProcess();
  const bool &lep2_genps_fromHardProcessFinalState();
  const bool &lep2_genps_fromHardProcessDecayed();
  const bool &lep2_genps_isDirectHardProcessTauDecayProductFinalState();
  const bool &lep2_genps_fromHardProcessBeforeFSR();
  const bool &lep2_genps_isLastCopy();
  const bool &lep2_genps_isLastCopyBeforeFSR();
  const bool &lep1_genps_isHardProcess();
  const bool &lep1_genps_fromHardProcessFinalState();
  const bool &lep1_genps_fromHardProcessDecayed();
  const bool &lep1_genps_isDirectHardProcessTauDecayProductFinalState();
  const bool &lep1_genps_fromHardProcessBeforeFSR();
  const bool &lep1_genps_isLastCopy();
  const bool &lep1_genps_isLastCopyBeforeFSR();
  const int &lep1_mc3idx();
  const int &lep2_mc3idx();
  const bool &lep1_el_conv_vtx_flag();
  const bool &lep2_el_conv_vtx_flag();
  const int &lep1_el_exp_innerlayers();
  const bool &lep1_mu_ptErr();
  const bool &lep2_mu_ptErr();
  const bool &lep1_el_threeChargeAgree();
  const bool &lep2_el_threeChargeAgree();
  const int &lep2_el_exp_innerlayers();
  const float &lep1_el_etaSC();
  const float &lep2_el_etaSC();
  const bool &lep1_nPixelMiss();
  const bool &lep2_nPixelMiss();
  const bool &lep1_tightCharge();
  const bool &lep2_tightCharge();
  const bool &lep1_isTrigSafeNoIsov1();
  const bool &lep1_isTrigSafev1();
  const bool &lep2_isTrigSafeNoIsov1();
  const bool &lep2_isTrigSafev1();
  const bool &lep1_tightMuonPOG();
  const bool &lep1_mediumMuonPOG();
  const bool &lep1_looseMuonPOG();
  const bool &lep2_tightMuonPOG();
  const bool &lep2_mediumMuonPOG();
  const bool &lep2_looseMuonPOG();
  const bool &lep3_mediumMuonPOG();
  const float &prefire_sf();
  const float &prefire_sfup();
  const float &prefire_sfdown();
  const float &prefire2016_sf();
  const float &prefire2016_sfup();
  const float &prefire2016_sfdown();
  const float &prefire2017_sf();
  const float &prefire2017_sfup();
  const float &prefire2017_sfdown();
  const float &prefire2017ele_sf();
  const float &prefire2017ele_sfup();
  const float &prefire2017ele_sfdown();
  const bool &is_fastsim();
  const bool &lep1_isGoodLeg();
  const bool &lep2_isGoodLeg();
  const bool &lep1_isFakeLeg();
  const bool &lep2_isFakeLeg();
  const bool &lep1_multiIso();
  const bool &lep2_multiIso();
  const float &lep1_sip();
  const float &lep2_sip();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep1_closeJet();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &lep2_closeJet();
  const bool &passed_id_inSituFR_lep1();
  const bool &passed_id_inSituFR_lep2();
  const bool &fired_trigger();
  const bool &fired_trigger_ss();
  const unsigned int &triggers();
  const float &weight_btagsf();
  const float &weight_btagsf_light_UP();
  const float &weight_btagsf_light_DN();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_iter_central();
  const float &weight_btagsf_iter_down_cferr1();
  const float &weight_btagsf_iter_down_cferr2();
  const float &weight_btagsf_iter_down_hf();
  const float &weight_btagsf_iter_down_hfstats1();
  const float &weight_btagsf_iter_down_hfstats2();
  const float &weight_btagsf_iter_down_jes();
  const float &weight_btagsf_iter_down_lf();
  const float &weight_btagsf_iter_down_lfstats1();
  const float &weight_btagsf_iter_down_lfstats2();
  const float &weight_btagsf_iter_up_cferr1();
  const float &weight_btagsf_iter_up_cferr2();
  const float &weight_btagsf_iter_up_hf();
  const float &weight_btagsf_iter_up_hfstats1();
  const float &weight_btagsf_iter_up_hfstats2();
  const float &weight_btagsf_iter_up_jes();
  const float &weight_btagsf_iter_up_lf();
  const float &weight_btagsf_iter_up_lfstats1();
  const float &weight_btagsf_iter_up_lfstats2();
  const float &weight();
  const float &weight_lepsf1();
  const float &weight_lepsf2();
  const float &weight_lepsf3();
  const float &weight_lepsf();
  const float &weight_triggersf();
  const float &weight_pu();
  const float &weight_isrsf();
  const int &year();
  const float &yearlumi();
  const float &weight_scale_UP();
  const float &weight_scale_DN();
  const float &weight_pdf_UP();
  const float &weight_pdf_DN();
  const float &weight_alphas_UP();
  const float &weight_alphas_DN();
  const float &weight_isrvar_UP();
  const float &weight_isrvar_DN();
  const float &weight_fsrvar_UP();
  const float &weight_fsrvar_DN();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gl1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gl2_p4();
  const float &glglpt();
  const float &isr_unc();
  const int &nisrMatch();
  const float &weight_isr();
  const float &weight_isr_dy();
  const float &weight_isr_tt();
  const float &weight_isr_UP();
  const float &weight_isr_DN();
  const bool &lep3_el_etaSC();
  const bool &lep3_el_conv_vtx_flag();
  const bool &lep3_el_exp_innerlayers();
  const bool &lep3_el_threeChargeAgree();
  const bool &lep3_el_dxyPV();
  const bool &lep3_el_ip3d();
  const bool &lep3_el_dzPV();
  const float &lep3_el_MVA_value();
  const bool &lep3_el_MVA();
  const bool &lep3_passes_RA5();
  const bool &lep3_mu_dxyPV();
  const bool &lep3_mu_ip3d();
  const bool &lep3_mu_dzPV();
  const bool &lep3_mu_ptErr();
  const bool &lep4_el_etaSC();
  const bool &lep4_el_conv_vtx_flag();
  const bool &lep4_el_exp_innerlayers();
  const bool &lep4_el_threeChargeAgree();
  const bool &lep4_el_dxyPV();
  const bool &lep4_el_ip3d();
  const bool &lep4_el_dzPV();
  const float &lep4_el_MVA_value();
  const bool &lep4_el_MVA();
  const bool &lep4_mu_dxyPV();
  const bool &lep4_mu_ip3d();
  const bool &lep4_mu_dzPV();
  const bool &lep4_mu_ptErr();
  const bool &lep3_isTrigSafeNoIsov1();
  const bool &lep3_isTrigSafev1();
  const bool &lep4_isTrigSafeNoIsov1();
  const bool &lep4_isTrigSafev1();
  const int &extragenb();
  const vector<int> &extragenbmoms();
  const int &extragenc();
  const vector<int> &extragencmoms();
  const int &ngenjets();
  const float &genht();
  const int &ngenjets30();
  const float &genht30();
  const bool &passfilter();
  const bool &hasgammatoll();
  const bool &gammatollmomemu();
  const float &gammatolldr();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gammatoll1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gammatoll2();
  const vector<int> &bjet_type();
  const vector<int> &jet_type();
  const vector<int> &jet_cat();
  const vector<int> &jet_matchedGenIndex();
  const vector<int> &jet_matchedGenId();
  const vector<int> &jet_matchedGenMId();
  const vector<float> &jet_matchedDr();
  const vector<float> &jet_matchedPtDiff();
  const int &ndrlt0p4();
  const bool &gengood();
  const int &nleptonic();
  const int &ntau();
  const int &nleptonicW();
  const float &mfourtop();
  const int &nhadronicW();
  const int &nW();
  const float &leptonicWSF();
  const float &hadronicWSF();
  const float &decayWSF();
  const int &njincone1();
  const int &njincone2();
  const int &bdt_nforwardjets20();
  const float &bdt_avgcdisc();
  const float &bdt_nbtags();
  const float &bdt_njets();
  const float &bdt_met();
  const float &bdt_ptl2();
  const float &bdt_nlb40();
  const float &bdt_ntb40();
  const float &bdt_nleps();
  const float &bdt_htb();
  const float &bdt_ml1j1();
  const float &bdt_dphil1l2();
  const float &bdt_maxmjoverpt();
  const float &bdt_detal1l2();
  const float &bdt_q1();
  const float &bdt_ptj1();
  const float &bdt_ptj6();
  const float &bdt_ptj7();
  const float &bdt_ptj8();
  const float &bdt_ptl1();
  const float &bdt_ptl3();
  const float &bdt_jec_up_nbtags();
  const float &bdt_jec_dn_nbtags();
  const float &bdt_jer_up_nbtags();
  const float &bdt_jer_dn_nbtags();
  const float &bdt_jec_up_njets();
  const float &bdt_jec_dn_njets();
  const float &bdt_jer_up_njets();
  const float &bdt_jer_dn_njets();
  const float &bdt_jec_up_met();
  const float &bdt_jec_dn_met();
  const float &bdt_jer_up_met();
  const float &bdt_jer_dn_met();
  const float &bdt_jec_up_htb();
  const float &bdt_jec_dn_htb();
  const float &bdt_jer_up_htb();
  const float &bdt_jer_dn_htb();
  const float &bdt_jec_up_nlb40();
  const float &bdt_jec_dn_nlb40();
  const float &bdt_jer_up_nlb40();
  const float &bdt_jer_dn_nlb40();
  const float &bdt_jec_up_ntb40();
  const float &bdt_jec_dn_ntb40();
  const float &bdt_jer_up_ntb40();
  const float &bdt_jer_dn_ntb40();
  const float &bdt_disc();
  const float &bdt_disc_jec_up();
  const float &bdt_disc_jer_up();
  const float &bdt_disc_jec_dn();
  const float &bdt_disc_jer_dn();
  const float &bdt_run2_disc();
  const int &bdt_run2_SRDISC();
  const float &bdt_run2_disc_jec_up();
  const float &bdt_run2_disc_jer_up();
  const float &bdt_run2_disc_jec_dn();
  const float &bdt_run2_disc_jer_dn();
}
#endif
